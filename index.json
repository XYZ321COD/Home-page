[{"content":"The goal of single-image super-resolution (SISR) is to transform a low-resolution image into a high-resolution version, enhancing both its detail and quality. This process, called upscaling, increases the image\u0026rsquo;s spatial resolution while sharpening and clarifying its visual features.\nWhile the objective remains the same, the methods to achieve SISR can vary. In this post (Part 1), I\u0026rsquo;ll explore three different neural network-based SISR approaches: color prediction, residual prediction, and kernel prediction. But before diving into these methods, it\u0026rsquo;s important to broadly discuss the datasets, neural network architecture, metrics, training parameters and benchmarks used when comparing these approaches.\nDatasets Training For this state of the project, DF2K dataset (DIV2K [1] + Flicker2K [2]) is used. The dataset consists of 3450 images. The low-resolution images are generated from ground truth images with bicubic downsampling.\nState-of-the-art algorithms are evaluated on three standard upscaling scales: 2x, 3x, and 4x. For this post the model will be trained and evaluated only on a 2x upscaling scale.\nValidation The performance is measured and compared on three standard benchmark datasets Set5 [3], Set14 [4] and BSD100 [5]. Example images from datasets can be seen in Figure 1.\nFigure 1: Example ground truth images from the datasets: Set5 (left), BSD100 (middle), and SET14 (right).\rMetrics In line with SRCNN [6], VDSR [7], and other similar methods, PSNR and SSIM metrics were calculated on the luminance component of the image. To ensure consistency with SRCNN and VDSR, a 2-pixel border was excluded from all sides of the image before calculating metrics.\nNetwork Architecture At this stage of the project, the basic U-Net architecture [8] is employed to extract features. Extracted features are then fed into a Predictor Network ($PN$), which transforms them into an upscaled version of the image. The prediction network differs depending on whether it is predicting color, residual, or kernels. The U-Net network, which functions as a feature extractor ($FN$), is combined with the prediction network ($PN$) to construct the whole model denoted as $N$.\nSimilar to the SRCNN [6], VDSR [7], and DRCN [9] networks, the model $N$ aims to learn an end-to-end mapping function $F$ between the bicubic-interpolated low-resolution image $I^{SR}$ and the high-resolution image $I^{HR}$.\nIn the original U-Net architecture, the decoder phase uses transposed convolution for upsampling. However, the current network architecture differs from the original U-Net, as it utilizes bicubic upscaling instead of transposed convolution, see Figure 2. The basic building block for U-Net architecture can be seen on Figure 3.\nFigure 2: U-Net architecture used for this project. The numbers above the features (purple rectangles) correspond to the number of feature channels.\rFigure 3: The structure of U-Net block.\rPrediction Networks Color Prediction Introduction A pioneering method based on neural networks in the field of single image super-resolution that directly predicts color is SRCNN [6]. The SRCNN model architecture consists of two main components:\nFeature Extraction: Two convolutional layers. The first layer uses a kernel size of $9×9$, followed by ReLU activation, and the second layer uses a kernel size of $5×5$. Reconstruction/Prediction Layer: A convolutional layer with a kernel size of $5×5$ that outputs three channels (RGB). Setup As previously discussed in this stage of the project, the feature extraction ($FE$) component is implemented using the U-Net network. The prediction network ($PN$) outputs three channels with a single convolutional layer using a $1×1$ kernel size, followed by a sigmoid activation function, which constrains the output within a 0-1 range.\nFor color prediction, $N$ directly reconstructs a high-resolution image $I^{HR}$.\n$$ N(x) = PN(FE(x)) \\approx I^{HR} $$\nFigure 4: Example input, prediction and ground-truth patch from Set5 for color prediction.\rResidual Prediction Introduction Residual prediction was introduced and popularized by VDSR [7]. In this approach, the model predicts residuals $I^{R}$ (the difference between the high-resolution and low-resolution images) rather than the high-resolution image directly (color prediction).\nWhen the network is trained to predict the entire high-resolution image, as in SRCNN, it must learn both low-frequency $I^{SR}$ and high-frequency information $I^{R}$. Low-frequency information is relatively simple and repetitive but it can still slow down training if the model focuses on learning it [7].\nResidual learning shifts the network’s focus to learning the more complex high-frequency components that are not present in the low-resolution input. This approach simplifies the learning task and speeds up convergence during the training [7].\nSetup The prediction network ($PN$) outputs three channels with a single convolutional layer using a $1×1$ kernel size.\nFor residual prediction, $N$ predicts the missing high-frequency details of $I^{SR}$, known as a residual part of the image $I^{R}$. The residual part of the image is defined as $I^{R} = I^{HR} - I^{SR}$, see Figure 5:\n$$ N(x) = PN(FE(x)) + x \\approx I^{HR} $$\nFigure 5: Example input, prediction and ground-truth patch from Set5 for residual prediction.\rKernel Prediction Introduction The kernel prediction network (KPN) [10] was introduced to address image denoising, an image restoration problem similar to super-resolution. KPN employs a CNN to estimate local weighting kernels, which are used to compute each denoised pixel based on its neighbors.\nFor all image restoration problems, including super resolution the kernel prediction network ensures that the final color estimation always remains within the boundary formed by the neighboring pixels in the input image [10], see Figure 6.\nThis significantly reduces the output value search space compared to direct color prediction methods, helping to avoid potential hallucination artifacts.\nFigure 6: On the left, pixel p (highlighted in red) and its neighborhood. In the center, the 3x3 filter predicted for the highlighted pixel. On the right, the super-resolved p after applying filtering.\rSetup Kernel prediction uses a single-layer convolutional prediction network ($PN$) that outputs a kernel of scalar weights that is applied to the blurry/low-frequency neighborhood of pixel $p$ to produce super resolved $\\tilde p$, see Figure 6.\nLetting $N(p)$ be the $k \\times k$ neighborhood centered around pixel $p$ , the final layer for each input pixel outputs kernel $z_{p} \\in \\mathbb{R}^{k \\times k}$. The kernel size $k$ is specified before training along with the other network hyperparameters and the same weights are applied to each RGB color channel. Experiments were conducted with $k=3$\nLet\u0026rsquo;s define $ \\left[\\mathbf{z}_{p}\\right]q $ as the q-th entry in the vector obtained by flattening $z{p}$, Using this, the final normalized kernel weights can be computed as:\n$$ w_{p q}=\\frac{\\exp \\left(\\left[\\mathbf{z}{p}\\right]q\\right)}{\\sum{q^{\\prime} \\in \\mathcal{N}(p)} \\exp \\left(\\left[\\mathbf{z}{p}\\right]_{q^{\\prime}}\\right)} $$\nand the super-resolved pixel $\\tilde p$ color as: $$ \\tilde p=\\sum_{q \\in \\mathcal{N}(p)} q w_{p q} $$\nExperiments Training Parameters Training is performed using RGB input patches of size $32×32$ extracted from the low-resolution image $I^{LR}$, paired with the corresponding high-resolution patches.\nThe model is trained with the Adam optimizer by setting $ \\beta_{1}=0.9 $, $ \\beta_{2}=0.9 $ and $ \\epsilon = 10^{−8}$.\nThe minibatch size is set to $16$. The learning rate is initialized as $10^{-3}$ and halved at every 10 epochs. All models are trained over $80$ epochs.\nFor all setups the networks minimize following loss function:\n$$ Loss(X,Y) = \\frac{1}{n} \\sum^{n}_{i=1} \\lvert N(X) - Y \\rvert $$\n$$ Loss(I^{SR}{i}, I^{HR}{i}) $$\nwhere $n$ is the number of samples in a mini-batch, $I^{HR}$ is ground-truth,and $I^{SR}$ is bicubic-upsampled low-resolution images.\nFigure 7: Learning curves on the training set.\rEvaluation of Different Prediction Networks Benchmark Results The quantitative evaluation results of the final models, calculated on public benchmark datasets, are shown in Table 1.\nDataset Bicubic Color Prediction Residual Prediction Kernel Prediction Set5 33.97 / 0.9358 33.89 / 0.9407 37.29 / 0.9596 36.66 / 0.9556 Set14 29.74 / 0.8549 30.00 / 0.8716 31.70 / 0.8966 31.24 / 0.8843 BSD100 30.32 / 0.8787 30.74 / 0.8904 32.89 / 0.9140 32.45 / 0.9045 Table 1: PSNR/SSIM for scale factor $\\times 2$ on datasets Set5, Set14, BSD100. Bold values indicate the best performance.\nThe network based on color prediction converges too slowly (see Figure 7) and underperforms compared to both residual prediction and kernel prediction (see Table 1). The slow convergence is due to the fact that the color prediction network does not carry low-frequency information throughout the network.\nThe residual prediction network yields the best results in terms of metrics, outperforming both color prediction and kernel prediction.\nThe qualitative results are presented in Figure 8. Models based on residual and kernel prediction successfully reconstruct the detailed textures and lines in the HR images and exhibit better-looking outputs compared to the model with color predction network which fails to reconstruct texture and lines.\nFigure 8: Super-resolution results of Image 20 (BSD100) with scale factor ×2.\rConclusions This post compares various prediction networks for single-image super-resolution (SISR). Models based on residual and kernel prediction converge faster and avoid blur artifacts present in upscaled images produced by the color prediction network. The next post will explore methods to improve the convergence speed of color prediction based model by modifying the feature extractor architecture.\nReferences [1] Lim, Bee, et al. \u0026ldquo;Enhanced deep residual networks for single image super-resolution.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition workshops. 2017.\n[2] Agustsson, Eirikur, and Radu Timofte. \u0026ldquo;Ntire 2017 challenge on single image super-resolution: Dataset and study.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition workshops. 2017.\n[3] Marco Bevilacqua, Aline Roumy, Christine Guillemot, and Marie Line Alberi-Morel. Low-complexity single-image super-resolution based on nonnegative neighbor embedding. 2012. 5\n[4] Roman Zeyde, Michael Elad, and Matan Protter. On single image scale-up using sparse-representations. In International conference on curves and surfaces, pages 711–730. Springer, 2010\n[5] David Martin, Charless Fowlkes, Doron Tal, and Jitendra Malik. A database of human segmented natural images and its application to evaluating segmentation algorithms and measuring ecological statistics. In Proceedings Eighth IEEE International Conference on Computer Vision. ICCV 2001, volume 2, pages 416–423. IEEE, 2001..\n[6] Dong, Chao, et al. \u0026ldquo;Image super-resolution using deep convolutional networks.\u0026rdquo; IEEE transactions on pattern analysis and machine intelligence 38.2 (2015): 295-307.\n[7] Kim, Jiwon, Jung Kwon Lee, and Kyoung Mu Lee. \u0026ldquo;Accurate image super-resolution using very deep convolutional networks.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2016.\n[8] Ronneberger, Olaf, Philipp Fischer, and Thomas Brox. \u0026ldquo;U-net: Convolutional networks for biomedical image segmentation.\u0026rdquo; Medical image computing and computer-assisted intervention–MICCAI 2015: 18th international conference, Munich, Germany, October 5-9, 2015, proceedings, part III 18. Springer International Publishing, 2015.\n[9] Kim, Jiwon, Jung Kwon Lee, and Kyoung Mu Lee. \u0026ldquo;Deeply-recursive convolutional network for image super-resolution.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2016.\n[10] Bako, Steve, et al. \u0026ldquo;Kernel-predicting convolutional networks for denoising Monte Carlo renderings.\u0026rdquo; ACM Trans. Graph. 36.4 (2017): 97-1. ","permalink":"https://michalznalezniak.com/posts/post2/","summary":"The goal of single-image super-resolution (SISR) is to transform a low-resolution image into a high-resolution version, enhancing both its detail and quality. This process, called upscaling, increases the image\u0026rsquo;s spatial resolution while sharpening and clarifying its visual features.\nWhile the objective remains the same, the methods to achieve SISR can vary. In this post (Part 1), I\u0026rsquo;ll explore three different neural network-based SISR approaches: color prediction, residual prediction, and kernel prediction.","title":"Single Image Super Resolution with various prediction networks"},{"content":"In this post, I would like to introduce you to CoHiClust, a Contrastive Hierarchical Clustering model based on deep neural networks, which can be applied to typical image data. CoHiClust distills the base network into a binary tree without access to any labeled data. CoHiClust outperforms the established and popular Agglomerative Clustering and generates a hierarchical structure of clusters consistent with human intuition and image semantics.\nYou can access the full paper of CoHiClust by clicking here.\nFor those who are interested in exploring the code, data, and additional resources associated with this study, you can find them in my GitHub repository here.\nClustering Clustering, a fundamental branch of unsupervised learning, is often one of the first steps in data analysis, which finds applications in anomaly detection [1], document clustering [2], bioinformatins [3] and many more. Initial approaches use representations taken from pre-trained models [4, 5] or employ autoencoders in joint training of the representation and the flat clustering model [6] or hierarchical clustering model [7]. Recent models designed to image data frequently follow the self-supervised learning principle, where the representation is trained on pairs of similar images generated automatically by data augmentations [8, 9]. Since augmentations used for image data are class-invariant, the latter techniques of ten obtain a very high similarity to the ground truth classes. However, we should be careful when comparing clustering techniques only by inspecting their accuracy with ground truth classes because the objective of clustering is not to perform classification.\nObjective of Clustering So what’s the objective of clustering then? The primary objective of clustering is to discover structures and patterns in high-dimensional unlabeled data and group together data points with similar patterns. The above procedure reduces the complexity, facilitates the interpretation, and grants important insights into data. Let’s examine how much meaningful information a clustering algorithm can deliver when applied to a subset of the most widely recognized datasets in the field of computer vision and machine learning — ImageNet-10.\nFig. 1. Information delivered by hierarchical clustering CoHiClust for ImageNet-10. It is evident that images with soccer ball are similar to pictures with oranges because of their shapes. Dogs are more similar to leopards than to penguins, which is reflected in the constructed hierarchy. The same hold when analyzing the leafs representing cars, trucks and ships. Looking at the first hierarchy level, we observe a distinction on the right sub-tree representing machines and left-sub-tree dominated by animals. Moreover, balls and oranges are separated from the animal branch.\nThe algorithm reduces high-dimensional images into a hierarchy of groups that describe images and provides information that summarizes the dataset from high to low-level information. The hierarchy of groups is consistent with human intuition and image semantics, see Figure 1.\nFig. 2. Super-groups created by clustering algorithm for Image-Net10.\rThanks to the clustering we can understand that ImageNet-10 consists of two super-groups which can be categorazied as \u0026lsquo;machines\u0026rsquo; and \u0026rsquo;not machines\u0026rsquo;, four super-groups which can be catogorazied as \u0026lsquo;flying machines\u0026rsquo;, \u0026rsquo;not flying machines\u0026rsquo;, \u0026lsquo;animals\u0026rsquo; and \u0026rsquo;not animals\u0026rsquo;, see Figure 2.\nHierarchical clustering Hierarchical clustering organizes data into a tree-like structure where clusters are nested within each other, while flat clustering forms non-overlapping clusters without any hierarchy.\nHierarchical clustering can provide more detailed information about the relationships between data points, as it captures the hierarchical structure of the data. This can be useful for exploring nested relationships and understanding similarities at different levels of granularity.\nHierarchical clustering groups data based on similarity, forming a hierarchical structure of clusters. Approaches to hierarchical clustering typically belong to two main groups.\nAgglomerative: This is a \u0026ldquo;bottom-up\u0026rdquo; approach: Each observation starts in its own cluster, and pairs of clusters are merged as one moves up the hierarchy. Divisive: This is a \u0026ldquo;top-down\u0026rdquo; approach: All observations start in one cluster, and splits are performed recursively as one moves down the hierarchy. CoHiClust CoHiClust by backpropagation, jointly learns deep representation using SimCLR [10] framework and performs hierarchical clustering in a top-down manner. There are three key components of CoHiClust, see Figure 3.\nThe backbone neural network $f(.)$ that generates the representation used by the hierarchical clustering head. The hierarchical clustering head $\\pi(.)$, which assigns data points to clusters by a sequence of decisions. The regularized contrastive loss, which allows for training the whole framework. Fig. 3: Illustration of main components of CoHiClust.\rBackbone network CoHiClust utilizes ResNet architectures as its backbone network. This component projects images into an internal representation, which is then utilized by the clustering network. CoHiClust can rely on various architecture options. You can observe how change of backbone network influences the final quality of clustering in the full paper.\nHierarchical clustering head CoHiClust depends on a soft binary decision tree to create a hierarchical structure, where leaves play the role of clusters (similar to [11] ). In contrast to hard decision trees, every internal node defines the probability of taking a left/right branch. The final assignment of the input examples to clusters involves partial decisions made by the internal nodes. Aggregating these decisions induces the posterior probability over leaves\nEach inner node is model by one neuron from linear layer $\\pi(z) = [\\sigma (w_1^T z + b_1), \\ldots, \\sigma (w_K^T z + b_K)]$, where $w_n \\in \\R^N$ and $b_n \\in \\R$ are trainable parameters of $\\pi$ and $\\sigma$ is sigmoid function.\nFig. 4: Illustration of distilling neurnal network into soft decision tree. The output neurons of the projection head $\\pi$ (appended to the base network $g$) model decisions made by the internal tree nodes. The final assignment of the input example to the cluster (leaf node) is performed by aggregating edge probabilities located on the path from the root to this leaf\nWith $\\pi$ output we can define a probability distribution of assigning data to clusters on all levels of the tree, see Figure 4\nLoss functions CoHiClust is trained with hierarchical contrastive loss function designed for trees - CoHiLoss. CoHiClust builds hierarchical structure by maximizing the likelihood that similar data points will follow the same path. The more similar data points, the longer they should be routed through the same nodes. Clustering works in unsupervised setting, therefor CoHiClust uses a self-supervised approach and generates images using data augmentations (SimCLR).\nConsider two data points $x_1, x_2$ with posterior probabilities $P_t(x_1), P_t(x_2)$ at level $t$. The probability they reach the same node is $P_t(x_1) \\cdot P_t(x_2) = \\sum_{i=0}^{2^t-1} P_t^i(x_1) P_t^i(x_2)$, maximal if both are identical one-hot vectors. Let\u0026rsquo;s Define the similarity score $s_t(x_1,x_2) = \\sqrt{P_t(x_1) \\cdot P_t(x_2)} = \\sum_{i=0}^{2^t-1} \\sqrt{P_t^i(x_1) P_t^i(x_2)}$. Let\u0026rsquo;s aggregate it over all levels of the tree, the final similarity function is $s(x_1,x_2) = \\sum_{t=0}^{T-1} s_t(x_1,x_2)$.\nIn training, consider a minibatch $ [{x_j}]_{j=1}^N $ and its augmented view $ \\tilde{x_j} $. Each $(x_j,\\tilde{x}_j)$ pair is treated as positive, maximizing their similarity score to encourage them to share the same leaf node. Other pairs are treated as negative to avoid degenerate solutions, yielding the hierarchical contrastive loss:\n$$ CoHiLossNeg = \\frac{1}{N(N-1)} \\sum_{j=1}^N \\sum_{i\\neq j} s(x_j,\\tilde{x}_{i}) $$\n$$ CoHiLossPos = \\frac{1}{N} \\sum_{j=1}^N s(x_j,\\tilde{x}_{j}) $$\n$$ CoHiLoss = -CoHiLossNeg + CoHiLossPos $$\nMinimizing this loss maximizes the likelihood of similar data points sharing the same path (second term) and minimizes the likelihood of dissimilar ones being grouped together.\nResults CoHiClust was evaluated on several datasets of color images of various resolutions and with a diverse number of classes. In addition to reporting similarity scores with ground-truth partitions, the constructed hierarchies were analyzed, which is equally important in practical use-cases.\nTo measure the similarity of the constructed partition with the ground truth, four widely-used clustering metrics were applied: normalized mutual information (NMI), clustering accuracy (ACC), adjusted rand index (ARI), and dendrogram purity (DP).\nFig. 5: Tree hierarchy constructed for MNIST. Observe that neighboring leaves contain images of visually similar classes, e.g. 8 and 0; 4 and 9; 1 and 7. Such a property holds also for nodes in the upper levels of the tree – the left sub-tree contain digits with circular shapes, while the digits located in the right sub-tree consist of lines.\nComparison with deep hierarchical clustering methods In authors knowledge, DeepECT [7] is the only hierarchical clustering method based on deep neural networks. Following their experimental setup, we report the results on two popular image datasets, MNIST and F-MNIST, and consider classical hierarchical algorithms evaluated on the latent representation created by the autoencoder and IDEC [12]. The results summarized in Table 1 demonstrate that CoHiClust outperforms all baselines on both MNIST and F-MNIST datasets in terms of all metrics. Interestingly, DeepECT benefits from data augmentation in the case of MNIST, while on F-MNIST it deteriorates its performance. All methods except CoHiClust and DeepECT failed completely to create a hierarchy recovering true classes (see the DP measure), which confirms that there is a lack of powerful hierarchical clustering methods based on neural networks.\nTable 1: Comparison with hierarchical models in terms of DP, NMI and ACC (higher is better).\rWhile examining the MNIST and F-MNIST datasets, it\u0026rsquo;s apparent that CoHiClust produces clusters with a sensible structure. This structure is in line with our expectations and the inherent semantics of the images. Figure 5 and Figure 6 provide visual confirmation of this alignment.\nFig. 6: Tree hierarchy generated by CoHiClust for F-MNIST (images in the nodes denote mean images in each sub-tree). The right sub-tree contains clothes while the other items (shoes and bags) are placed in the left branch. Looking at the lowest hierarchy level, we have clothes with long sleeves grouped in the neighboring leaves. The same holds for clothes with designs. Observe that CoHiClust assigned white-colored t-shirts and dresses to the same cluster, while trousers are in the separate one. Small shoes such as sneakers or sandals are considered similar (neighboring leaves) and distinct from ankle shoes. Concluding, CoHiClust is able to retrieve meaningful information about image semantics, which is complementary to the ground truth classification.\nComparision with Agglomerative Hierarchical Clustering The top layer responsible for constructing a decision tree is an important component of CoHiClust and cannot be replaced by alternative hierarchical clustering methods. For this purpose, a backbone network is first trained with a typical self-supervised SimCLR technique. Next, agglomerative clustering is applied to the resulting representation. As seen in Table 2, agglomerative clustering yields very low results, indicating that joint optimization of the backbone network and clustering tree using the proposed CoHiLoss is a significantly better choice. Consequently, the representation taken from a typical self-supervised learning model does not provide a representation that can be clustered accurately using simple methods.\nTable 2: Comparison with agglomerative clustering trained on the representation\rgenerated by the self-supervised learning model on CIFAR10.\rComparision with deep flat clustering methods CoHiClust was evaluated on typical bemchmark datasets: CIFAR10, CIFAR-100, STL-10, ImageNet-Dogs, and ImageNet-10. The results presented in Table 3 show that CoHiClust outperforms the comparative methods in 3 out of 5 datasets. It gives extremely good results on CIFAR-10 and ImageNet-10, but is notably worse than CC on STL-10. Nevertheless, one should keep in mind that CoHiClust is the only hierarchical method in this comparison, and constructing a clustering hierarchy, which resembles ground truth classes, is more challenging than directly generating a flat partition.\nTable 3: Comparison with flat clustering methods on datasets of color images.\rWhen analyzing the CIFAR10 and ImageNet-10 datasets, it becomes apparent that CoHiClust generates cluster structures that exhibit a high level of coherence, effectively capturing the underlying patterns within the data. This observation is particularly noteworthy as it aligns closely with our intuitive understanding of how these datasets should be organized. By examining Figure 1 and Figure 7, we can observe how the clusters formed by CoHiClust accurately reflect the semantic relationships present in the images, further reinforcing the validity of the clustering results.\nFig. 7: A tree hierarchy generated by CoHiClust for CIFAR-10. There is an evident distinction into animals (left branch) and machines (right branch). Moreover, all neighbor leaves represent visually similar classes (horses and deers, dogs and cats, trucks and cars, ships and planes). Images with frogs seem to be visually similar to cats and dogs, which leads to their placement in the neighbor leaves (however cats and dogs are connected by a stronger relationship). Interestingly, a small portion of images with horses’ heads are grouped together with birds because of their similar shapes. Although there is a slight mismatch between dogs and cats classes, the left leaf contains pets with bright fur photographed in front, while the right leaf includes animals with dark fur presented from the side, which coincides with our intuition.\nConclusions CoHiClust a contrastive hierarchical clustering suits well to clustering of large-scale image databases. The hierarchical structure constructed by CoHiClust provides significantly more information about the data than typical flat clustering models. In particular, we can inspect the similarity between selected groups by measuring their distance in the hierarchy tree and, in consequence, find super-clusters. Experimental analysis performed on typical clustering benchmarks confirms that the produced partitions are highly similar to ground-truth classes. At the same time, CoHiClust allows us to discover important patterns that have not been encoded in the class labels.\nReferences [1] Liu, Hongfu, et al. \u0026ldquo;Clustering with outlier removal.\u0026rdquo; IEEE transactions on knowledge and data engineering 33.6 (2019): 2369-2379.\n[2] Steinbach, Michael, George Karypis, and Vipin Kumar. \u0026ldquo;A comparison of document clustering techniques.\u0026rdquo; (2000).\n[3] Oyelade, Jelili, et al. \u0026ldquo;Clustering algorithms: their application to gene expression data.\u0026rdquo; Bioinformatics and Biology insights 10 (2016): BBI-S38316.\n[4] Guérin, J., Gibaru, O., Thiery, S., Nyiri, E.: Cnn features are also great at unsupervised classification. arXiv preprint arXiv:1707.01700 (2017).\n[5] Naumov, S., Yaroslavtsev, G., Avdiukhin, D.: Objective-based hierarchical clustering of deep embedding vectors. In: AAAI. pp. 9055–9063 (2021).\n[6] Guo, X., Gao, L., Liu, X., Yin, J.: Improved deep embedded clustering with local structure preservation. In: Ijcai. pp. 1753–1759 (2017).\n[7] Mautz, D., Plant, C., Böhm, C.: Deep embedded cluster tree. In: 2019 IEEE International Conference on Data Mining (ICDM). pp. 1258–1263. IEEE (2019).\n[8] Li, Y., Hu, P., Liu, Z., Peng, D., Zhou, J.T., Peng, X.: Contrastive clustering.In: Proceedings of the AAAI Conference on Artificial Intelligence. vol. 35, pp. 8547–8555 (2021).\n[9] Dang, Z., Deng, C., Yang, X., Wei, K., Huang, H.: Nearest neighbor matching for deep clustering. In: Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. pp. 13693–13702 (2021).\n[10] Chen, T., Kornblith, S., Norouzi, M., Hinton, G.: A simple framework for contrastive learning of visual representations. In: III, H.D., Singh, A. (eds.) Proceedings of the 37th International Conference on Machine Learning. Proceedings of Machine Learning Research, vol. 119, pp. 1597–1607. PMLR (13–18 Jul 2020), https://proceedings.mlr.press/v119/chen20j.html.\n[11] Frosst, N., Hinton, G.: Distilling a neural network into a soft decision tree. arXiv preprint arXiv:1711.09784 (2017).\n[12] Guo, X., Gao, L., Liu, X., Yin, J.: Improved deep embedded clustering with local structure preservation. In: Ijcai. pp. 1753–1759 (2017).\n","permalink":"https://michalznalezniak.com/posts/post1/","summary":"In this post, I would like to introduce you to CoHiClust, a Contrastive Hierarchical Clustering model based on deep neural networks, which can be applied to typical image data. CoHiClust distills the base network into a binary tree without access to any labeled data. CoHiClust outperforms the established and popular Agglomerative Clustering and generates a hierarchical structure of clusters consistent with human intuition and image semantics.\nYou can access the full paper of CoHiClust by clicking here.","title":"Contrastive Hierarchical Clustering"}]